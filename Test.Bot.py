import logging
import asyncio
import sqlite3
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.exceptions import TelegramBadRequest  # <-- –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
from aiogram.types import InputMediaPhoto
from datetime import datetime, timedelta, date




# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7730531432:AAHMCTb2MC3VELVT_QQvDn6cS5wpm_s5_-4"
CHANNEL_USERNAME = "@ZHARA_barAndHookan"
ADMIN_ID = 1201484037

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class AdminState(StatesGroup):
    main_menu = State()
    delete_booking = State()
    write_to_user = State()
    restore_booking = State() # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    confirm_delete_all = State()


class BookingState(StatesGroup):
    choosing_place = State()
    choosing_area = State()  # <--- –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    entering_name = State()
    entering_people = State()
    choosing_date = State()
    choosing_time = State()



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã
conn = sqlite3.connect("booking.db")
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS bookings (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    name TEXT,
    people INTEGER,
    date TEXT,
    time TEXT,
    place TEXT,
    status TEXT DEFAULT 'active'
)''')
conn.commit()

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
from aiogram.client.default import DefaultBotProperties

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def is_subscribed(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ("member", "administrator", "creator")
    except:
        return False

def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID

# –ö–Ω–æ–ø–∫–∏
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª", callback_data="menu_book")],
        [InlineKeyboardButton(text="üìñ –ú–æ–∏ –±—Ä–æ–Ω–∏", callback_data="menu_my_bookings")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –û –∑–∞–≤–µ–¥–µ–Ω–∏—è—Ö", callback_data="menu_about")],
        [InlineKeyboardButton(text="ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ/–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/lslm_Jordan")]

    ])

def admin_main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –í—Å–µ –±—Ä–æ–Ω–∏", callback_data="admin_show_bookings")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –±—Ä–æ–Ω—å", callback_data="admin_delete_booking")],
        [InlineKeyboardButton(text="‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—Ä–æ–Ω—å", callback_data="admin_restore_booking")],
        [InlineKeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≥–æ—Å—Ç—é", callback_data="admin_write_to_user")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="admin_delete_all_bookings")],
        [InlineKeyboardButton(text="üîô –í—ã–π—Ç–∏", callback_data="admin_exit")]
    ])




# –ö–æ–º–∞–Ω–¥—ã
@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç, —á–µ–º –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?:", reply_markup=main_menu())

@dp.message(Command("admin"))
async def cmd_admin(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùó –í—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    await message.answer("üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_main_menu())
    await state.set_state(AdminState.main_menu)

# –û –∑–∞–≤–µ–¥–µ–Ω–∏–∏

@dp.callback_query(F.data == "menu_about")
async def show_about(call: CallbackQuery):
    # --- –ñ–ê–†–ê –Ω–∞ –ú—è—Å–Ω–∏—Ü–∫–æ–π ---
    await call.message.answer_media_group([
        InputMediaPhoto(media=FSInputFile("img/zharaM.webp")),
        InputMediaPhoto(media=FSInputFile("img/zharaM2.webp")),
        InputMediaPhoto(media=FSInputFile("img/zharaM3.webp"),
            caption=(
                "<b>üî• –ñ–ê–†–ê –Ω–∞ –ú—è—Å–Ω–∏—Ü–∫–æ–π</b>\n"
                "üìç –ú–æ—Å–∫–≤–∞, —É–ª. –ú—è—Å–Ω–∏—Ü–∫–∞—è, 41—Å3\n"
                "üïí –í—Å-–ß—Ç 12:00 - 01:00, –ü—Ç-–°–± 12:00 - 03:00\n"
                "üçΩ –ö—É—Ö–Ω—è, –∫–∞–ª—å—è–Ω—ã, –º—É–∑—ã–∫–∞ –∏ —É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞."
            )
        )
    ])
    await call.message.answer(
        "üìñ –ú–µ–Ω—é:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìñ –ú–µ–Ω—é –ú—è—Å–Ω–∏—Ü–∫–∞—è", callback_data="menu_food_zhara_mias")]
        ])
    )

    # --- –ñ–ê–†–ê –Ω–∞ –ê—Ä–±–∞—Ç–µ ---
    await call.message.answer_media_group([
        InputMediaPhoto(media=FSInputFile("img/zharaA1.webp")),
        InputMediaPhoto(media=FSInputFile("img/zharaA2.webp")),
        InputMediaPhoto(media=FSInputFile("img/zharaA3.webp"),
            caption=(
                "<b>üî• –ñ–ê–†–ê –Ω–∞ –ê—Ä–±–∞—Ç–µ</b>\n"
                "üìç –ú–æ—Å–∫–≤–∞, –ù–æ–≤—ã–π –ê—Ä–±–∞—Ç, 21\n"
                "üïí –ü–Ω‚Äì–ß—Ç: 12:00‚Äì01:00, –ü—Ç‚Äì–í—Å: 12:00‚Äì03:00\n"
                "üé∂ –ë–∞—Ä, –∂–∏–≤–∞—è –º—É–∑—ã–∫–∞, —Ç–∞–Ω—Ü—ã, –∫–∞–ª—å—è–Ω—ã."
            )
        )
    ])
    await call.message.answer(
        "üìñ –ú–µ–Ω—é:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìñ –ú–µ–Ω—é –ê—Ä–±–∞—Ç", callback_data="menu_food_zhara_arb")]
        ])
    )

    # --- –ü–æ–∫–ª–æ–Ω–∫–∞ ---
    await call.message.answer_media_group([
        InputMediaPhoto(media=FSInputFile("img/pokl.JPG")),
        InputMediaPhoto(media=FSInputFile("img/poklFull.JPG")),
        InputMediaPhoto(media=FSInputFile("img/poklLove.JPG"),
            caption=(
                "<b>üôá –ü–æ–∫–ª–æ–Ω–∫–∞ –ë–∞—Ä</b>\n"
                "üìç –ú–æ—Å–∫–≤–∞, —É–ª. –ì–µ–Ω–µ—Ä–∞–ª–∞ –ï—Ä–º–æ–ª–æ–≤–∞ 4\n"
                "üïí –ï–∂–µ–¥–Ω–µ–≤–Ω–æ: 12:00 - 00:00\n"
                "üçπ –°—Ç–∏–ª—å–Ω—ã–π –±–∞—Ä —Å –∞–≤—Ç–æ—Ä—Å–∫–∏–º–∏ –∫–æ–∫—Ç–µ–π–ª—è–º–∏, –∫–∞–ª—å—è–Ω–∞–º–∏ –∏ –æ—Ç–ª–∏—á–Ω–æ–π –º—É–∑—ã–∫–æ–π."
            )
        )
    ])
    await call.message.answer(
        "üìñ –ú–µ–Ω—é:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìñ –ú–µ–Ω—é –ü–æ–∫–ª–æ–Ω–∫–∞", callback_data="menu_food_poklonka")]
        ])
    )

    # --- –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ ---
    await call.message.answer(
        "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
        ])
    )
    await call.answer()

# –ú–µ–Ω—é PDF
@dp.callback_query(F.data == "menu_food_zhara_mias")
async def show_food_zhara_mias(call: CallbackQuery):
    await call.message.answer_document(FSInputFile("files/menu_zhara_mias.pdf"), caption="üìã –ú–µ–Ω—é –ñ–ê–†–ê –Ω–∞ –ú—è—Å–Ω–∏—Ü–∫–æ–π")
    await call.answer()

@dp.callback_query(F.data == "menu_food_zhara_arb")
async def show_food_zhara_arb(call: CallbackQuery):
    await call.message.answer_document(FSInputFile("files/menu_zhara_arb.pdf"), caption="üìã –ú–µ–Ω—é –ñ–ê–†–ê –Ω–∞ –ê—Ä–±–∞—Ç–µ")
    await call.answer()

@dp.callback_query(F.data == "menu_food_poklonka")
async def show_food_poklonka(call: CallbackQuery):
    await call.message.answer_document(FSInputFile("files/menu_poklonka.pdf"), caption="üìã –ú–µ–Ω—é –ü–æ–∫–ª–æ–Ω–∫–∞ –ë–∞—Ä–∞")
    await call.message.answer_document(FSInputFile("files/menu_poklonka2.pdf"), caption="üìã –î–µ—Ç—Å–∫–æ–µ –ú–µ–Ω—é –ü–æ–∫–ª–æ–Ω–∫–∞ –ë–∞—Ä–∞")
    await call.answer()

# –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
@dp.callback_query(F.data == "menu_my_bookings")
async def show_my_bookings(call: CallbackQuery):
    with sqlite3.connect("booking.db") as conn:
        cur = conn.cursor()
        cur.execute("SELECT * FROM bookings WHERE user_id=? ORDER BY status, date, time", (call.from_user.id,))
        rows = cur.fetchall()

    if not rows:
        await call.message.edit_text(
            "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
            ])
        )
    else:
        text = "üìñ –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n(üü¢ - –∞–∫—Ç–∏–≤–Ω—ã–µ, üî¥ - –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ)\n\n"
        keyboard = []

        for row in rows:
            status_icon = "üü¢" if row[7] == 'active' else "üî¥"
            text += (
                f"{status_icon} #{row[0]}\n"
                f"üè¢ {row[6]}\n"
                f"üë§ {row[2]}\n"
                f"üë• {row[3]} —á–µ–ª\n"
                f"üìÖ {row[4]} ‚è∞ {row[5]}\n"
                f"–°—Ç–∞—Ç—É—Å: {'–∞–∫—Ç–∏–≤–Ω–∞' if row[7] == 'active' else '–æ—Ç–º–µ–Ω–µ–Ω–∞'}\n\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
            if row[7] == 'active':
                keyboard.append([InlineKeyboardButton(
                    text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å #{row[0]}",
                    callback_data=f"cancel_booking_{row[0]}"
                )])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∫–æ–Ω—Ü–µ
        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")])

        await call.message.edit_text(
            text.strip(),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )


@dp.callback_query(F.data.startswith("cancel_booking_"))
async def cancel_booking(call: CallbackQuery):
    booking_id = call.data.split("_")[2]  # –ü–æ–ª—É—á–∞–µ–º ID –±—Ä–æ–Ω–∏

    with sqlite3.connect("booking.db") as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—Ä–æ–Ω—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∞–∫—Ç–∏–≤–Ω–∞
        cur = conn.cursor()
        cur.execute("SELECT * FROM bookings WHERE id=? AND user_id=? AND status='active'",
                    (booking_id, call.from_user.id))
        booking = cur.fetchone()

        if not booking:
            await call.answer("‚ùå –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –±—Ä–æ–Ω—å", show_alert=True)
            return

        # –ü–æ–º–µ—á–∞–µ–º –±—Ä–æ–Ω—å –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—É—é
        conn.execute("UPDATE bookings SET status='cancelled' WHERE id=?", (booking_id,))
        conn.commit()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏
    booking_info = (
        f"üè¢ {booking[6]}\n"
        f"üë§ {booking[2]}\n"
        f"üë• {booking[3]} —á–µ–ª\n"
        f"üìÖ {booking[4]} ‚è∞ {booking[5]}"
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await call.message.edit_text(
        f"‚ùå –ë—Ä–æ–Ω—å #{booking_id} –æ—Ç–º–µ–Ω–µ–Ω–∞:\n\n{booking_info}\n\n"
        f"–ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ –æ—à–∏–±–∫–µ, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_my_bookings")]
        ])
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await bot.send_message(
        ADMIN_ID,
        f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –±—Ä–æ–Ω—å:\n\n"
        f"#{booking_id}\n"
        f"{booking_info}\n"
        f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {call.from_user.id}"
    )

    await call.answer()


@dp.callback_query(F.data.startswith("cancel_booking_"))
async def ask_confirm_cancel(call: CallbackQuery):
    booking_id = call.data.split("_")[2]

    await call.message.edit_text(
        f"‚ùå –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å #{booking_id}?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"confirm_cancel_{booking_id}")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="menu_my_bookings")]
        ])
    )


@dp.callback_query(F.data.startswith("confirm_cancel_"))
async def confirm_cancel_booking(call: CallbackQuery):
    booking_id = call.data.split("_")[2]  # –ü–æ–ª—É—á–∞–µ–º ID –±—Ä–æ–Ω–∏

    with sqlite3.connect("booking.db") as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—Ä–æ–Ω—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∞–∫—Ç–∏–≤–Ω–∞
        cur = conn.cursor()
        cur.execute("SELECT * FROM bookings WHERE id=? AND user_id=? AND status='active'",
                    (booking_id, call.from_user.id))
        booking = cur.fetchone()

        if not booking:
            await call.answer("‚ùå –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –±—Ä–æ–Ω—å", show_alert=True)
            return

        # –ü–æ–º–µ—á–∞–µ–º –±—Ä–æ–Ω—å –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—É—é
        conn.execute("UPDATE bookings SET status='cancelled' WHERE id=?", (booking_id,))
        conn.commit()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏
    booking_info = (
        f"üè¢ {booking[6]}\n"
        f"üë§ {booking[2]}\n"
        f"üë• {booking[3]} —á–µ–ª\n"
        f"üìÖ {booking[4]} ‚è∞ {booking[5]}"
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await call.message.edit_text(
        f"‚ùå –ë—Ä–æ–Ω—å #{booking_id} –æ—Ç–º–µ–Ω–µ–Ω–∞:\n\n{booking_info}\n\n"
        f"–ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ –æ—à–∏–±–∫–µ, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_my_bookings")]
        ])
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await bot.send_message(
        ADMIN_ID,
        f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –±—Ä–æ–Ω—å:\n\n"
        f"#{booking_id}\n"
        f"{booking_info}\n"
        f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {call.from_user.id}"
    )

    await call.answer()

@dp.callback_query(F.data == "menu_book")
async def choose_place(call: CallbackQuery, state: FSMContext):
    if not await is_subscribed(call.from_user.id):
        await call.message.edit_text(f"‚ùó –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: {CHANNEL_USERNAME}")
        return
    await call.message.edit_text("üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî• –ñ–ê–†–ê –Ω–∞ –ú—è—Å–Ω–∏—Ü–∫–æ–π", callback_data="place_zhara_mias")],
        [InlineKeyboardButton(text="üî• –ñ–ê–†–ê –Ω–∞ –ê—Ä–±–∞—Ç–µ", callback_data="place_zhara_arb")],
        [InlineKeyboardButton(text="üôá –ü–æ–∫–ª–æ–Ω–∫–∞ –±–∞—Ä(–¥–æ 01.06 –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç)", callback_data="place_poklonka")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ]))
    await state.set_state(BookingState.choosing_place)

@dp.callback_query(F.data == "back_main")
async def back_main_menu(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

@dp.callback_query(F.data.startswith("place_"))
async def choose_area_or_enter_name(call: CallbackQuery, state: FSMContext):
    if not await is_subscribed(call.from_user.id):
        await call.message.edit_text(f"‚ùó –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: {CHANNEL_USERNAME}")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ü–æ–∫–ª–æ–Ω–∫–∏
    if call.data == "place_poklonka":
        today = datetime.now().date()
        if today < date(2024, 6, 1):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ —Ä–∞–Ω—å—à–µ 1 –∏—é–Ω—è
            await call.message.edit_text(
                "üôá –ü–æ–∫–ª–æ–Ω–∫–∞ –±–∞—Ä –æ—Ç–∫—Ä–æ–µ—Ç—Å—è 1 –∏—é–Ω—è 2024 –≥–æ–¥–∞.\n"
                "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —Å —ç—Ç–æ–π –¥–∞—Ç—ã.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_book")]
                ])
            )
            return

    if call.data == "place_zhara_mias":
        await state.update_data(place="üî• –ñ–ê–†–ê –Ω–∞ –ú—è—Å–Ω–∏—Ü–∫–æ–π")
        await call.message.edit_text("üí∫ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ª–∞:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="ü•Ç VIP-–∫–æ–º–Ω–∞—Ç–∞", callback_data="area_vip")],
            [InlineKeyboardButton(text="ü™ë –û–±—â–∏–π –∑–∞–ª", callback_data="area_common")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_book")]
        ]))
        await state.set_state(BookingState.choosing_area)
    else:
        places = {
            "place_zhara_arb": "üî• –ñ–ê–†–ê –Ω–∞ –ê—Ä–±–∞—Ç–µ",
            "place_poklonka": "üôá –ü–æ–∫–ª–æ–Ω–∫–∞ –±–∞—Ä"
        }
        await state.update_data(place=places[call.data], area=None)
        await call.message.edit_text("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await state.set_state(BookingState.entering_name)

@dp.callback_query(F.data.in_({"area_vip", "area_common"}))
async def handle_area_choice(call: CallbackQuery, state: FSMContext):
    if call.data == "area_vip":
        await state.update_data(area="VIP-–∫–æ–º–Ω–∞—Ç–∞")
        await call.message.edit_text("üíé –í—ã –≤—ã–±—Ä–∞–ª–∏ VIP-–∫–æ–º–Ω–∞—Ç—É.\nüí∞ –î–µ–ø–æ–∑–∏—Ç: 3000 ‚ÇΩ\nüë• –î–æ 8 —á–µ–ª–æ–≤–µ–∫.\n\nüë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    else:
        await state.update_data(area="–û–±—â–∏–π –∑–∞–ª")
        await call.message.edit_text("üë• –í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–±—â–∏–π –∑–∞–ª.\n\nüë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(BookingState.entering_name)

@dp.message(BookingState.entering_name)
async def enter_people(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("üë• –°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫?")
    await state.set_state(BookingState.entering_people)


@dp.message(BookingState.entering_people)
async def choose_date(message: Message, state: FSMContext):
    try:
        people = int(message.text.strip())
        data = await state.get_data()

        if data.get("area") == "VIP-–∫–æ–º–Ω–∞—Ç–∞" and people > 8:
            await message.answer("‚ö†Ô∏è –í VIP-–∫–æ–º–Ω–∞—Ç–µ –º–∞–∫—Å–∏–º—É–º 8 —á–µ–ª–æ–≤–µ–∫. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π.")
            return

        await state.update_data(people=people)
        today = datetime.now()

        # –î–ª—è –ü–æ–∫–ª–æ–Ω–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—ã —Ç–æ–ª—å–∫–æ —Å 1 –∏—é–Ω—è
        if data.get("place") == "üôá –ü–æ–∫–ª–æ–Ω–∫–∞ –±–∞—Ä":
            start_date = date(2024, 6, 1)
            if today.date() < start_date:
                available_dates = [start_date + timedelta(days=i) for i in range(3)]
            else:
                available_dates = [today.date() + timedelta(days=i) for i in range(3)]
        else:
            available_dates = [today.date() + timedelta(days=i) for i in range(3)]

        kb = [[InlineKeyboardButton(text=d.strftime("%d.%m.%Y"),
                                    callback_data=f"date_{d.strftime('%Y-%m-%d')}")]
              for d in available_dates]
        kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_book")])

        await message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
        await state.set_state(BookingState.choosing_date)
    except:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@dp.callback_query(F.data.startswith("date_"))
async def choose_time(call: CallbackQuery, state: FSMContext):
    await state.update_data(date=call.data.split("_")[1])
    times = [f"{h:02d}:{m:02d}" for h in range(12, 24) for m in (0, 30)]
    kb = [[InlineKeyboardButton(text=t, callback_data=f"time_{t}")] for t in times]
    kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_book")])
    await call.message.edit_text("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
    await state.set_state(BookingState.choosing_time)

@dp.callback_query(F.data.startswith("time_"))
async def save_booking(call: CallbackQuery, state: FSMContext):
    try:
        time = call.data.split("_")[1]
        await state.update_data(time=time)
        data = await state.get_data()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        place = data.get("place")
        area = data.get("area")
        full_place = f"{place} - {area}" if area else place

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω—å
        with sqlite3.connect("booking.db") as conn:
            cur = conn.cursor()
            cur.execute('''INSERT INTO bookings (user_id, name, people, date, time, place)
                           VALUES (?, ?, ?, ?, ?, ?)''',
                        (call.from_user.id, data['name'], data['people'], data['date'], data['time'], full_place))
            conn.commit()

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await call.message.edit_text(
            f"‚úÖ –ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
            f"üè¢ <b>{full_place}</b>\n"
            f"üë§ <b>{data['name']}</b>\n"
            f"üë• <b>{data['people']} —á–µ–ª–æ–≤–µ–∫</b>\n"
            f"üìÖ <b>{data['date']}</b>\n"
            f"‚è∞ <b>{data['time']}</b>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_main")]
            ])
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await bot.send_message(
            ADMIN_ID,
            f"üì¢ –ù–æ–≤–∞—è –±—Ä–æ–Ω—å:\n"
            f"üè¢ {full_place}\n"
            f"üë§ {data['name']}\n"
            f"üë• {data['people']} —á–µ–ª–æ–≤–µ–∫\n"
            f"üìÖ {data['date']} ‚è∞ {data['time']}\n"
            f"üÜî ID: {call.from_user.id}"
        )

        await state.clear()

    except TelegramBadRequest:
        await call.message.answer("‚ùó –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ.")

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏
@dp.callback_query(F.data == "admin_restore_booking")
async def admin_restore_request(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π –±—Ä–æ–Ω–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:")
    await state.set_state(AdminState.restore_booking)


@dp.message(AdminState.restore_booking)
async def admin_restore_confirm(message: Message, state: FSMContext):
    try:
        booking_id = int(message.text.strip())
        with sqlite3.connect("booking.db") as conn:
            cur = conn.cursor()
            cur.execute("SELECT user_id, place, date, time, status FROM bookings WHERE id=?", (booking_id,))
            booking = cur.fetchone()

            if not booking:
                await message.answer("‚ö†Ô∏è –ë—Ä–æ–Ω—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            user_id, place, date, time, status = booking

            if status == 'active':
                await message.answer("‚ö†Ô∏è –≠—Ç–∞ –±—Ä–æ–Ω—å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞.")
                return

            conn.execute("UPDATE bookings SET status='active' WHERE id=?", (booking_id,))
            conn.commit()

            try:
                await bot.send_message(
                    user_id,
                    f"‚úÖ –í–∞—à–∞ –±—Ä–æ–Ω—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:\n\n"
                    f"üè¢ {place}\n"
                    f"üìÖ {date} ‚è∞ {time}\n\n"
                    f"–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞."
                )
                await message.answer(f"‚úÖ –ë—Ä–æ–Ω—å #{booking_id} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.")
            except TelegramBadRequest:
                await message.answer(f"‚úÖ –ë—Ä–æ–Ω—å #{booking_id} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")

    await message.answer("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_main_menu())
    await state.set_state(AdminState.main_menu)
# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@dp.callback_query(F.data == "admin_show_bookings")
async def admin_all(call: CallbackQuery):
    with sqlite3.connect("booking.db") as conn:
        cur = conn.cursor()
        cur.execute("SELECT * FROM bookings ORDER BY status, date, time")
        rows = cur.fetchall()

    if not rows:
        await call.message.edit_text("üì≠ –ù–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
    else:
        text = "üìñ –í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n(üü¢ - –∞–∫—Ç–∏–≤–Ω—ã–µ, üî¥ - –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ)\n\n"
        for row in rows:
            status_icon = "üü¢" if row[7] == 'active' else "üî¥"
            text += (
                f"{status_icon} #{row[0]}\n"
                f"üè¢ {row[6]}\n"
                f"üë§ {row[2]}\n"
                f"üë• {row[3]}\n"
                f"üìÖ {row[4]} ‚è∞ {row[5]}\n"
                f"üÜî {row[1]}\n"
                f"–°—Ç–∞—Ç—É—Å: {'–∞–∫—Ç–∏–≤–Ω–∞' if row[7] == 'active' else '–æ—Ç–º–µ–Ω–µ–Ω–∞'}\n\n"
            )

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        messages = [text[i:i + 4000] for i in range(0, len(text), 4000)]
        for msg in messages:
            await call.message.answer(msg)

@dp.callback_query(F.data == "admin_delete_booking")
async def admin_del_request(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –±—Ä–æ–Ω–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(AdminState.delete_booking)


@dp.message(AdminState.delete_booking)
async def admin_del_confirm(message: Message, state: FSMContext):
    try:
        booking_id = int(message.text.strip())
        with sqlite3.connect("booking.db") as conn:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            cur = conn.cursor()
            cur.execute("SELECT user_id, place, date, time FROM bookings WHERE id=?", (booking_id,))
            booking = cur.fetchone()

            if booking:
                user_id, place, date, time = booking
                # –ü–æ–º–µ—á–∞–µ–º –±—Ä–æ–Ω—å –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—É—é –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
                conn.execute("UPDATE bookings SET status='cancelled' WHERE id=?", (booking_id,))
                conn.commit()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    await bot.send_message(
                        user_id,
                        f"‚ùó –í–∞—à–∞ –±—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º:\n\n"
                        f"üè¢ {place}\n"
                        f"üìÖ {date} ‚è∞ {time}\n\n"
                        f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ."
                    )
                    await message.answer("‚úÖ –ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.")
                except TelegramBadRequest:
                    await message.answer(
                        "‚úÖ –ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞).")
            else:
                await message.answer("‚ö†Ô∏è –ë—Ä–æ–Ω—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")

    await message.answer("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_main_menu())
    await state.set_state(AdminState.main_menu)

@dp.callback_query(F.data == "admin_write_to_user")
async def write_to_user_start(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n–ü—Ä–∏–º–µ—Ä: 1234567890 –ü—Ä–∏–≤–µ—Ç!")
    await state.set_state(AdminState.write_to_user)

@dp.message(AdminState.write_to_user)
async def write_message_user(message: Message, state: FSMContext):
    try:
        parts = message.text.split(maxsplit=1)
        user_id = int(parts[0])
        msg_text = parts[1] if len(parts) > 1 else "–ü—Ä–∏–≤–µ—Ç!"
        try:
            await bot.send_message(user_id, msg_text)
            await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        except TelegramBadRequest:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
    except:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
    await message.answer("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_main_menu())
    await state.set_state(AdminState.main_menu)


@dp.callback_query(F.data == "admin_delete_all_bookings")
async def delete_all(call: CallbackQuery):
    with sqlite3.connect("booking.db") as conn:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        cur = conn.cursor()
        cur.execute("SELECT user_id, place, date, time FROM bookings WHERE status='active'")
        active_bookings = cur.fetchall()

        # –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏ –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ
        conn.execute("UPDATE bookings SET status='cancelled' WHERE status='active'")
        conn.commit()



    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    notified = 0
    for user_id, place, date, time in active_bookings:
        try:
            await bot.send_message(
                user_id,
                f"‚ùó –í–∞—à–∞ –±—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º:\n\n"
                f"üè¢ {place}\n"
                f"üìÖ {date} ‚è∞ {time}\n\n"
                f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ."
            )
            notified += 1
        except TelegramBadRequest:
            continue

    await call.message.edit_text(
        f"‚úÖ –í—Å–µ –±—Ä–æ–Ω–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã. –£–≤–µ–¥–æ–º–ª–µ–Ω–æ {notified}/{len(active_bookings)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
        reply_markup=admin_main_menu()
    )

@dp.callback_query(F.data == "admin_exit")
async def admin_exit(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("üö™ –í—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=main_menu())

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
